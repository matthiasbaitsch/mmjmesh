# Plotting

This chapter is incomplete and probably not worth reading.

```{julia}
#| echo: false
#| warning: false
include("setup.jl")
CairoMakie.set_theme!(CairoMakie.theme_minimal())
```

## Plot a 1D mesh

### On a straight line

```{julia}
m = makemeshoninterval(0, 4, 20)
mplot(m)
```

One value per node

```{julia}
mplot(m, -1.1 .+ 2.2 * rand(nentities(m.topology, 0)))
```

One value per element

```{julia}
mplot(m, -1.1 .+ 2.2 * rand(nedges(m)))
```

Two values per element

```{julia}
mplot(m, -1.1 .+ 2.2 * rand(2, nedges(m)))
```

### Vertical

```{julia}
m = makemeshoninterval(π, 3π, 20, t -> [0; t])
mplot(m, -1.1 .+ 3.2 * rand(nedges(m)))
```

### On a spiral

```{julia}
m = makemeshoninterval(π, 3π, 20, t -> t * [cos(t); sin(t)])
mplot(m, -1.1 .+ 3.2 * rand(2, nedges(m)))
```

### Customize plot

Plot customization works like this:

```{julia}
f = mplot(m, -1.1 .+ 3.2 * rand(2, nedges(m)))
ax = f.content[1]
ax.title = "Spiral with reversed vertical axis"
ax.yreversed = true
f
```

Documentation on plot axis can be found on the [Makie documentation](https://docs.makie.org/stable/reference/blocks/axis) which unfortunately is quite hard to read.

## Plot a 2D mesh

### Quad mesh

```{julia}
a = 80
m = makemeshonrectangle(9.0, 4.5, 2a, a)
println("Number of nodes is Nn = ", (a + 1) * (2a + 1))
print("Links...")
@time l12 = links(m.topology, 1, 2);
```

Default color

```{julia}
ps = PlotStyle(m)
ps.edges.outlineonly = false
ps.edges.color = :hotpink
mplot(m, ps)
```

Colors for nodes

```{julia}
mplot(m, 4.1 * (rand(nentities(m.topology, 0)) .- 0.25))
```

Colors for elements

```{julia}
mplot(m, 4.1 * (rand(nentities(m.topology, 2)) .- 0.25))
```

### Triangle mesh

```{julia}
a = 20
m = makemeshonrectangle(9.0, 4.5, 2a, a, TRIANGLE)
println("Nn = ", (a + 1) * (2a + 1))
print("Links (1, 2):")
@time l12 = links(m.topology, 1, 2);
```

Default color

```{julia}
ps = PlotStyle(m)
ps.edges.outlineonly = false
ps.edges.color = :hotpink
mplot(m, ps)
```

Colors for nodes

```{julia}
mplot(m, 4.1 * (rand(nentities(m.topology, 0)) .- 0.25))
```

Colors for elements

```{julia}
mplot(m, 4.1 * (rand(nentities(m.topology, 2)) .- 0.25))
```
