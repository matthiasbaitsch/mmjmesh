# Introduction 

The `MMJMesh` library is intended to become a simple yet versatile basis for the implementation of finite element methods or postprocessing tools. At the moment it is in a very early stage of development.

## Demo for 1D meshes

First, we need to load the required modules. Note that `CairoMakie` included by `import` and not by `using` in order to avoid name collissions.

```{julia}
#| warning: false
import CairoMakie
using MMJMesh.Plots
using MMJMesh.Meshes
using MMJMesh.Utilities
```

```{julia}
#| echo: false
CairoMakie.set_theme!(CairoMakie.theme_minimal())
```

In the simplest case, a 1D mesh is defined by parameter bounds and the number of elements. 

```{julia}
m = makemeshoninterval(0.0, 8.0, 4)
mplot(m) |> mconf()
```

Elements of the mesh can be easily processed in a loop:

```{julia}
for e ∈ elements(m)
    println(e, " with n = ", nodeIdxs(e), " and l = ", length(e))
end
```

Various functions like `nodeIdxs` and `length` exist to access properties. If you are used to an object-oriented language like Java it might be helpful to understand that `nodeIdxs(e)` in Julia is equivalent to `e.nodeIdxs()` in an OO language.

Node coordinates are retrieved using the `coordinates` method:

```{julia}
coordinates(m)
```

Properties are associated with the mesh using the `data` field of the mesh and a name for the property in the form `:name`

```{julia}
m.data[:foo] = 99
m.data[:bar] = sqrt;
```

and then are ready to be used in a later stage

```{julia}
f = m.data[:bar]
f(4)
```

In Julia, `:name` is called a symbol. In many applications, this is equivalent to the use of strings like `"name"`, however, easier to type.

It is easy to plot quantities for nodes

```{julia}
mplot(m, -1 .+ 2 * rand(nnodes(m))) |> mconf()
```

constant on elements

```{julia}
mplot(m, -1 .+ 2 * rand(nelements(m))) |> mconf()
```

or linear on elements

```{julia}
mplot(m, -1 .+ 2 * rand(2, nelements(m))) |> mconf()
```

Furthermore, 1D meshes can be created with a parametric function

```{julia}
m = makemeshoninterval(0, 5, 60, t -> [t; 0.3 * sin(π * t)])
mplot(m) |> mconf()
```

where the last parameter `t -> [t; sin(t)]` (read: `t` is mapped on the vector `(t, sin(t))`) defines the parametric curve

$$
    \mathbf{u}(t) =
    \left(
    \begin{array}{c}
        t
        \\ 
        \sin(t)
    \end{array}
    \right).
$$

## Demo for 2D meshes

Create mesh on rectangular grid

```{julia}
a = 80
m = makemeshonrectangle(9.0, 4.5, 2a, a)
mplot(m) |> mconf()
```

Read mesh from Gmsh

```{julia}
m = Mesh("../data/gmsh/advanced.msh")
mplot(m) |> mconf()
```

Indexes of nodes on boundary
```{julia}
m.groups[:boundarynodes]
```

