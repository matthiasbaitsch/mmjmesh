# Adaptive sampling

```{julia}
#| echo: false
#| warning: false
include("setup.jl")
using IntervalSets
using LinearAlgebra
import MMJMesh.Plots: approximationerror, sampleadaptive, sampleadaptive
```


```{julia}
function doplot(xy)
    f = cm.lines(xy)
    cm.scatter!(xy, color=:darkred, markersize=5)
    return f
end
```


```{julia}
sampleadaptive(x -> -0.2413 + x, -1, 2, ir=true) |> doplot
```


```{julia}
sampleadaptive(x -> x^100, 0, 1) |> doplot
```


```{julia}
sampleadaptive(x -> sin(1.0 / x), 0.0001, 0.05, npoints=7) |> doplot
```


```{julia}
sampleadaptive(x -> sin(30 * sin(x)), 0, 2pi, npoints=7) |> doplot
```


```{julia}
sampleadaptive(x -> 1 / x, -1, 1) |> doplot
```


```{julia}
sampleadaptive(x -> (-0.3 + x), -1, 1, ir=true) |> doplot
```


```{julia}
sampleadaptive(x -> x^2, -1, 1) |> doplot
```


```{julia}
a = 0.01
f = Polynomial(0, 1, d=-1 .. 1) + a^2 / Polynomial(a^2, 0.0, 1.0)
sampleadaptive(f, -1, 1) |> doplot
```


```{julia}
cm.lines(0.001 .. 0.05, x -> sin(1 / x))
```