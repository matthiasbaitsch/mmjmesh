{
  "hash": "d00d272f2f455c9d09a94b2106c5c7c9",
  "result": {
    "engine": "jupyter",
    "markdown": "# Introduction \n\nThe `MMJMesh` library is intended to become a simple yet versatile basis for the implementation of finite element methods or postprocessing tools. At the moment it is in a very early stage of development.\n\n## Demo for 1D meshes\n\nFirst, we need to load the required modules. Note that `CairoMakie` included by `import` and not by `using` in order to avoid name collissions.\n\n::: {#5db1fbc8 .cell execution_count=1}\n``` {.julia .cell-code}\nimport CairoMakie\nusing MMJMesh.Plots\nusing MMJMesh.Meshes\nusing MMJMesh.Utilities\n```\n:::\n\n\n\n\nIn the simplest case, a 1D mesh is defined by parameter bounds and the number of elements. \n\n::: {#416ee2a4 .cell execution_count=3}\n``` {.julia .cell-code}\nm = makemeshoninterval(0.0, 8.0, 4)\nmplot(m) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](index_files/figure-html/cell-4-output-1.svg){}\n:::\n:::\n\n\nElements of the mesh can be easily processed in a loop:\n\n::: {#1d13f7cb .cell execution_count=4}\n``` {.julia .cell-code}\nfor e ∈ elements(m)\n    println(e, \" with n = \", nodeindices(e), \" and l = \", length(e))\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEdge{2, 2}[1] with n = [1, 2] and l = 2.0\nEdge{2, 2}[2] with n = [2, 3] and l = 2.0\nEdge{2, 2}[3] with n = [3, 4] and l = 2.0\nEdge{2, 2}[4] with n = [4, 5] and l = 2.0\n```\n:::\n:::\n\n\nVarious functions like `nodeindices` and `length` exist to access properties. If you are used to an object-oriented language like Java it might be helpful to understand that `nodeindices(e)` in Julia is equivalent to `e.nodeindices()` in an OO language.\n\nNode coordinates are retrieved using the `coordinates` method:\n\n::: {#a9d46f37 .cell execution_count=5}\n``` {.julia .cell-code}\ncoordinates(m)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n2×5 Matrix{Float64}:\n 0.0  2.0  4.0  6.0  8.0\n 0.0  0.0  0.0  0.0  0.0\n```\n:::\n:::\n\n\nProperties are associated with the mesh using the `data` field of the mesh and a name for the property in the form `:name`\n\n::: {#61266ee7 .cell execution_count=6}\n``` {.julia .cell-code}\nm.data[:foo] = 99\nm.data[:bar] = sqrt;\n```\n:::\n\n\nand then are ready to be used in a later stage\n\n::: {#7969fb06 .cell execution_count=7}\n``` {.julia .cell-code}\nf = m.data[:bar]\nf(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n2.0\n```\n:::\n:::\n\n\nIn Julia, `:name` is called a symbol. In many applications, this is equivalent to the use of strings like `\"name\"`, however, easier to type.\n\nIt is easy to plot quantities for nodes\n\n::: {#b39f3605 .cell execution_count=8}\n``` {.julia .cell-code}\nmplot(m, -1 .+ 2 * rand(nnodes(m))) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](index_files/figure-html/cell-9-output-1.svg){}\n:::\n:::\n\n\nconstant on elements\n\n::: {#c5609878 .cell execution_count=9}\n``` {.julia .cell-code}\nmplot(m, -1 .+ 2 * rand(nelements(m))) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](index_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\nor linear on elements\n\n::: {#d537c54a .cell execution_count=10}\n``` {.julia .cell-code}\nmplot(m, -1 .+ 2 * rand(2, nelements(m))) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](index_files/figure-html/cell-11-output-1.svg){}\n:::\n:::\n\n\nFurthermore, 1D meshes can be created with a parametric function\n\n::: {#67b3f3c6 .cell execution_count=11}\n``` {.julia .cell-code}\nm = makemeshoninterval(0, 5, 60, t -> [t; 0.3 * sin(π * t)])\nmplot(m) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](index_files/figure-html/cell-12-output-1.svg){}\n:::\n:::\n\n\nwhere the last parameter `t -> [t; sin(t)]` (read: `t` is mapped on the vector `(t, sin(t))`) defines the parametric curve\n\n$$\n    \\mathbf{u}(t) =\n    \\left(\n    \\begin{array}{c}\n        t\n        \\\\ \n        \\sin(t)\n    \\end{array}\n    \\right).\n$$\n\n## Demo for 2D meshes\n\nCreate mesh on rectangular grid\n\n::: {#ac9ec332 .cell execution_count=12}\n``` {.julia .cell-code}\na = 80\nm = makemeshonrectangle(9.0, 4.5, 2a, a)\nmplot(m) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](index_files/figure-html/cell-13-output-1.svg){}\n:::\n:::\n\n\nRead mesh from Gmsh\n\n::: {#3434b7d9 .cell execution_count=13}\n``` {.julia .cell-code}\nm = Mesh(\"../data/gmsh/advanced.msh\")\nmplot(m) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](index_files/figure-html/cell-14-output-1.svg){}\n:::\n:::\n\n\nIndices of nodes on boundary\n\n::: {#52bf6db4 .cell execution_count=14}\n``` {.julia .cell-code}\nm.groups[:boundarynodes]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n12-element NodeGroup:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  9\n 10\n 11\n 12\n 13\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}