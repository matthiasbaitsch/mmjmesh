{
  "hash": "e72175c3d1bbb2642c5efb8d385d01a9",
  "result": {
    "engine": "jupyter",
    "markdown": "# The Mesh interface\n\nThis chapter is incomplete and probably not worth reading.\n\n::: {#38a3338e .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nmeshpath (generic function with 1 method)\n```\n:::\n:::\n\n\n## Basic usage\n\nCreate mesh\n\n::: {#8f3bcee8 .cell execution_count=2}\n``` {.julia .cell-code}\ncoords = [0.0 1.0 2.0 0.1 0.9 1.9; 0.0 0.1 0.0 0.9 1.0 0.9]\nelts = [[1, 2, 5, 4], [2, 3, 6], [2, 6, 5]]\nm = Mesh(coords, elts, 2)\nmplot(m) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](mesh_files/figure-html/cell-3-output-1.svg){}\n:::\n:::\n\n\nCoordinates of a node\n\n::: {#dc25a85e .cell execution_count=3}\n``` {.julia .cell-code}\ncoordinates(node(m, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n2-element Vector{Float64}:\n 1.0\n 0.1\n```\n:::\n:::\n\n\nCoordinates of a face\n\n::: {#11bcfb89 .cell execution_count=4}\n``` {.julia .cell-code}\ncoordinates(face(m, 3))\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n2×3 Matrix{Float64}:\n 1.0  1.9  0.9\n 0.1  0.9  1.0\n```\n:::\n:::\n\n\nProcess faces and print node and edge indices\n\n::: {#f562e94a .cell execution_count=5}\n``` {.julia .cell-code}\nfor e ∈ elements(m)\n    println(e)\n    println(\"- \", nodeindices(e))\n    println(\"- \", edgeindices(e))\n    println(\"- \", faceindices(e))\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFace{2, 4}[1]\n- [1, 2, 5, 4]\n- [1, 2, 3, 4]\n- [3]\nFace{2, 3}[2]\n- [2, 3, 6]\n- [5, 6, 7]\n- [3]\nFace{2, 3}[3]\n- [2, 6, 5]\n- [7, 8, 2]\n- [1, 2]\n```\n:::\n:::\n\n\n## Read mesh from Gmsh file\n\n::: {#350b9f34 .cell execution_count=6}\n``` {.julia .cell-code}\nm = Mesh(meshpath(\"complex-g1.msh\"))\nmplot(m, edgesvisible=true) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](mesh_files/figure-html/cell-7-output-1.svg){}\n:::\n:::\n\n\n## Groups and predefined groups\n\nMesh entities can be collected in groups some of which are predefined.\n\n::: {#e7272fd0 .cell execution_count=7}\n``` {.julia .cell-code}\nkeys(m.groups.recipes)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nKeySet for a Dict{Symbol, Function} with 7 entries. Keys:\n  :solids\n  :boundaryfaces\n  :faces\n  :nodes\n  :edges\n  :boundaryedges\n  :boundarynodes\n```\n:::\n:::\n\n\n::: {#3fda1e18 .cell execution_count=8}\n``` {.julia .cell-code}\nshow(m.groups[:boundarynodes])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNodeGroup[1:19, 31:34, 46:106, 116:157]\n```\n:::\n:::\n\n\nGroups can be used to filter access\n\n::: {#b09cb7d9 .cell execution_count=9}\n``` {.julia .cell-code}\nm = Mesh(meshpath(\"complex-g1.msh\"))\np = mplot(m)\ncm.scatter!(p.axis, coordinates(m, :boundarynodes), color = :hotpink)\np |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](mesh_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\nAdditional groups can be defined\n\n::: {#79687e02 .cell execution_count=10}\n``` {.julia .cell-code}\nm.groups[:f1] = FaceGroup(100:300)\nm.groups[:f2] = FaceGroup(200:600)\nm.groups[:e1] = EdgeGroup(600:800)\nm.groups[:e2] = EdgeGroup(700:900)\nmplot(m) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](mesh_files/figure-html/cell-11-output-1.svg){}\n:::\n:::\n\n\n## Data\n\nExample how to attach data to mesh entities:\n\n::: {#c97256da .cell execution_count=11}\n``` {.julia .cell-code}\nm = Mesh(meshpath(\"complex-g1.msh\"))\n\nn1 = node(m, 1)\nn2 = node(m, 2)\ne22 = element(m, 22)\nn1.data[:d1] = 42\ne22.data[:d2] = 61\n\nprintln(\" n1.data[:d1] = \", n1.data[:d1])\nprintln(\" n2.data[:d1] = \", n2.data[:d1])\nprintln(\"e22.data[:d2] = \", e22.data[:d2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n n1.data[:d1] = 42\n n2.data[:d1] = nothing\ne22.data[:d2] = 61\n```\n:::\n:::\n\n\nExample how to attach data to groups:\n\n::: {#97aa1a93 .cell execution_count=12}\n``` {.julia .cell-code}\nm = Mesh(meshpath(\"complex-g1.msh\"))\n\nprintln(\"s1: \", m.groups[:s1].indices)\nprintln(\"s2: \", m.groups[:s2].indices)\nprintln(\"s3: \", m.groups[:s3].indices)\n\nm.data[:kefunc, :s1] = \"f1\";\nm.data[:kefunc, :s2] = \"f2\";\nm.data[:kefunc, :s3] = \"f3\";\n\ne0005 = element(m, 0005)\ne0490 = element(m, 0490)\ne1132 = element(m, 1132)\n\nprintln(\"e0005.data[:kefunc] = \", e0005.data[:kefunc])\nprintln(\"e0490.data[:kefunc] = \", e0490.data[:kefunc])\nprintln(\"e1132.data[:kefunc] = \", e1132.data[:kefunc])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ns1: [1:488]\ns2: [489:1130]\ns3: [1131:1372]\ne0005.data[:kefunc] = f1\ne0490.data[:kefunc] = f2\ne1132.data[:kefunc] = f3\n```\n:::\n:::\n\n\n",
    "supporting": [
      "mesh_files"
    ],
    "filters": [],
    "includes": {}
  }
}