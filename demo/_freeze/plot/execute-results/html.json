{
  "hash": "27c8777b7b8375a3e6965b7e11241927",
  "result": {
    "engine": "jupyter",
    "markdown": "# Plotting\n\nThis chapter is utterly incomplete and probably not worth reading.\n\n\n\n## Plot a 1D mesh\n\n### On a straight line\n\n::: {#2925a6ed .cell execution_count=2}\n``` {.julia .cell-code}\nm = makemeshoninterval(0, 4, 20) \nmplot(m) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](plot_files/figure-html/cell-3-output-1.svg){}\n:::\n:::\n\n\nNodes hidden if too many.\n\n::: {#548fdf1a .cell execution_count=3}\n``` {.julia .cell-code}\nm = makemeshoninterval(0, 4, 60)\nmplot(m) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](plot_files/figure-html/cell-4-output-1.svg){}\n:::\n:::\n\n\nOne value per node\n\n::: {#39ef217d .cell execution_count=4}\n``` {.julia .cell-code}\nmplot(m, -1.1 .+ 2.6 * rand(nnodes(m))) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](plot_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\nOne value per element\n\n::: {#1c012e59 .cell execution_count=5}\n``` {.julia .cell-code}\nmplot(m, -1.1 .+ 2.2 * rand(nedges(m))) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](plot_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\nTwo values per element\n\n::: {#1f58f2d0 .cell execution_count=6}\n``` {.julia .cell-code}\nmplot(m, -1.1 .+ 2.2 * rand(2, nedges(m))) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](plot_files/figure-html/cell-7-output-1.svg){}\n:::\n:::\n\n\n### Vertical\n\n::: {#38943897 .cell execution_count=7}\n``` {.julia .cell-code}\nm = makemeshoninterval(π, 3π, 20, t -> [0; t])\nmplot(m, -1.1 .+ 3.2 * rand(nedges(m))) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](plot_files/figure-html/cell-8-output-1.svg){}\n:::\n:::\n\n\n### On a spiral\n\n::: {#87039791 .cell execution_count=8}\n``` {.julia .cell-code}\nm = makemeshoninterval(π, 3π, 20, t -> t * [cos(t); sin(t)])\nmplot(m, -1.1 .+ 3.2 * rand(2, nedges(m))) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](plot_files/figure-html/cell-9-output-1.svg){}\n:::\n:::\n\n\n### Customize plot\n\nPlot customization works like this:\n\n::: {#4437c18c .cell execution_count=9}\n``` {.julia .cell-code}\nf, ax = mplot(m, -1.1 .+ 3.2 * rand(2, nedges(m))) |> mconf()\nax.title = \"Spiral with reversed vertical axis\"\nax.yreversed = true\nf\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](plot_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\nDocumentation on plot axis can be found on the [Makie documentation](https://docs.makie.org/stable/reference/blocks/axis) which unfortunately is quite hard to read.\n\n## Plot a 2D mesh\n\n### Quad mesh\n\n::: {#059e4574 .cell execution_count=10}\n``` {.julia .cell-code}\na = 80\nm = makemeshonrectangle(9.0, 4.5, 2a, a)\nprintln(\"Number of nodes is Nn = \", (a + 1) * (2a + 1))\nprint(\"Links...\")\n@time l12 = links(m.topology, 1, 2);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of nodes is Nn = 13041\nLinks...  0.089022 seconds (1.11 M allocations: 86.500 MiB, 33.05% gc time, 14.93% compilation time)\n```\n:::\n:::\n\n\nDefault color\n\n::: {#461901a7 .cell execution_count=11}\n``` {.julia .cell-code}\nmplot(m, edgesvisible=true, edgecolor=:hotpink) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](plot_files/figure-html/cell-12-output-1.svg){}\n:::\n:::\n\n\nColors for nodes\n\n::: {#79bc1e8e .cell execution_count=12}\n``` {.julia .cell-code}\nmplot(m, 4.1 * (rand(nnodes(m)) .- 0.25)) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](plot_files/figure-html/cell-13-output-1.svg){}\n:::\n:::\n\n\nColors for elements\n\n::: {#acf239c8 .cell execution_count=13}\n``` {.julia .cell-code}\nmplot(m, 4.1 * (rand(nfaces(m)) .- 0.25)) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](plot_files/figure-html/cell-14-output-1.svg){}\n:::\n:::\n\n\n### Triangle mesh\n\n::: {#6ca71a6b .cell execution_count=14}\n``` {.julia .cell-code}\na = 20\nm = makemeshonrectangle(9.0, 4.5, 2a, a, TRIANGLE)\nprintln(\"Nn = \", (a + 1) * (2a + 1))\nprint(\"Links (1, 2):\")\n@time l12 = links(m.topology, 1, 2);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNn = 861\nLinks (1, 2):  0.004111 seconds (101.71 k allocations: 8.227 MiB)\n```\n:::\n:::\n\n\nDefault color\n\n::: {#6b3bcf9a .cell execution_count=15}\n``` {.julia .cell-code}\nmplot(m, edgesvisible=true) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![](plot_files/figure-html/cell-16-output-1.svg){}\n:::\n:::\n\n\nColors for nodes\n\n::: {#00952734 .cell execution_count=16}\n``` {.julia .cell-code}\nmplot(m, 4.1 * (rand(nnodes(m)) .- 0.25)) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n![](plot_files/figure-html/cell-17-output-1.svg){}\n:::\n:::\n\n\nColors for elements\n\n::: {#7020a981 .cell execution_count=17}\n``` {.julia .cell-code}\nmplot(m, 4.1 * (rand(nfaces(m)) .- 0.25)) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n![](plot_files/figure-html/cell-18-output-1.svg){}\n:::\n:::\n\n\n::: {#0b95159d .cell execution_count=18}\n``` {.julia .cell-code}\ncm.set_theme!(cm.theme_minimal())\nm = makemeshoninterval(π, 3π, 20, t -> t * [cos(t); sin(t)])\n# cm.with_theme(cm.theme_dark()) do\n# cm.update_theme!(xxx=:blue)\n# cm.update_theme!(markercolor=:tomato)\ncm.update_theme!(Axis=(leftspinevisible=false,))\n\n#println(cm.theme(:markercolor)[])\n\nmplot(m, edgecolor = :green)\n#cm.scatter(coordinates(m))\n#end\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n![](plot_files/figure-html/cell-19-output-1.svg){}\n:::\n:::\n\n\n## Plot options\n\n::: {#18b0cd2d .cell execution_count=19}\n``` {.julia .cell-code}\na = 10\nm1 = makemeshonrectangle(4, 2, 2a, a)\nmplot(m1, 3 * rand(nfaces(m1)),\n    nodesvisible=true, nodecolor=:hotpink, nodesize=12,\n    edgesvisible=true, edgecolor=:lightblue, edgelinewidth=3,\n    featureedgecolor=:red, featureedgelinewidth=6,\n    facecolormap=:bluesreds\n) |> mconf()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n![](plot_files/figure-html/cell-20-output-1.svg){}\n:::\n:::\n\n\n::: {#604ab7f3 .cell execution_count=20}\n``` {.julia .cell-code}\nm2 = makemeshoninterval(0, 4, 20)\nmplot(m2, rand(nnodes(m2)),\n    lineplotoutlinesvisible=true,\n    edgecolor=:blue, edgelinewidth=10,\n    lineplotscale=0.3,\n    lineplotoutlinescolor=:hotpink,\n    lineplotoutlineslinewidth=2.0,\n    lineplotfacescolormap=:bluesreds\n) |> mconf(title=\"Test Plot\")\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n![](plot_files/figure-html/cell-21-output-1.svg){}\n:::\n:::\n\n\n## Adaptive sampling\n\n\n\n### Derivation of quadrature formulae\n\n::: {#d99799fe .cell execution_count=22}\n``` {.julia .cell-code}\nX1 = 0:1/4:1\nL1 = lagrangepolynomials(X1, 0 .. 1)\nW1 = [integrate(L, 0 .. 1) for L in L1]\n\nX2 = [0, 0.253124, 0.4986745, 0.75834, 1]\nL2 = lagrangepolynomials(X2, 0 .. 1)\nW2 = [integrate(L, 0 .. 1) for L in L2]\n\nfunction nint(f, a, b)\n    w = b - a\n    y1 = f.(a .+ w * X1)\n    y2 = f.(a .+ w * X2)\n    w * dot(W1, y1), w * dot(W2, y2)\nend\n\nprintln(nint(x -> x, 0, 2))\nprintln(nint(sin, 0, pi))\nprintln(nint(sin, pi, 2pi))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1.999999999999996, 1.999999999999985)\n(1.9985707318238337, 1.9986169017000417)\n(-1.9985707318238337, -1.998616901700041)\n```\n:::\n:::\n\n\n### Integral of squared distance between curve and straight line\n\n::: {#7f8a8680 .cell execution_count=23}\n``` {.julia .cell-code code-fold=\"true\"}\nfunction doplot(xy)\n    x, y = xy\n    f = cm.lines(x, y)\n    cm.scatter!(x, y, color=:darkred, markersize=5)\n    return f\nend\n\nfunction convergence(f, a, b, n)\n    h = 1\n    X = X2\n    W = W2\n    e = zeros(n)\n\n    for i in 1:n\n        w = b - a\n        x = a .+ w * X\n        y = f.(x)\n        e[i] = approximationerror(h, X, W, y)\n        b = (a + b) / 2\n        h /= 2\n    end\n\n    return e\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nconvergence (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {#381372ef .cell execution_count=24}\n``` {.julia .cell-code}\nn = 5\n(1:n, convergence(x -> 100x^3, -0.25, 1.5, n)) |> doplot\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n![](plot_files/figure-html/cell-25-output-1.svg){}\n:::\n:::\n\n\n::: {#3c48a89c .cell execution_count=25}\n``` {.julia .cell-code}\n(1:n, convergence(sin, 0, pi, n)) |> doplot\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n![](plot_files/figure-html/cell-26-output-1.svg){}\n:::\n:::\n\n\n::: {#53e9fc95 .cell execution_count=26}\n``` {.julia .cell-code}\n(1:n, convergence(x -> 1 / x, -1, 1e-5, n)) |> doplot\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n![](plot_files/figure-html/cell-27-output-1.svg){}\n:::\n:::\n\n\n::: {#4db8885f .cell execution_count=27}\n``` {.julia .cell-code}\nn = 20\n(1:n, convergence(x -> sin(1 / x), 1e-5, 1e-1, n)) |> doplot\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n![](plot_files/figure-html/cell-28-output-1.svg){}\n:::\n:::\n\n\n### Test cases\n\n::: {#06a1b2ac .cell execution_count=28}\n``` {.julia .cell-code}\nsampleadaptive(x -> x^100, 0, 1) |> doplot\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n![](plot_files/figure-html/cell-29-output-1.svg){}\n:::\n:::\n\n\n::: {#e9bc1c6c .cell execution_count=29}\n``` {.julia .cell-code}\nsampleadaptive(x -> sin(1.0 / x), 0, 0.05, level=14) |> doplot\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n![](plot_files/figure-html/cell-30-output-1.svg){}\n:::\n:::\n\n\n::: {#f462705e .cell execution_count=30}\n``` {.julia .cell-code}\nsampleadaptive(x -> 1 / x, -1, 1) |> doplot\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n![](plot_files/figure-html/cell-31-output-1.svg){}\n:::\n:::\n\n\n::: {#3ecabbc7 .cell execution_count=31}\n``` {.julia .cell-code}\nsampleadaptive(x -> (-0.3 + x), -1, 1, ir=true) |> doplot\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n![](plot_files/figure-html/cell-32-output-1.svg){}\n:::\n:::\n\n\n::: {#716f0f4f .cell execution_count=32}\n``` {.julia .cell-code}\nsampleadaptive(x -> x^2, -1, 1) |> doplot\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n![](plot_files/figure-html/cell-33-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "plot_files"
    ],
    "filters": [],
    "includes": {}
  }
}