{
  "hash": "5ef10ec4fea7a07262177ddccd985682",
  "result": {
    "engine": "jupyter",
    "markdown": "# Mathematics\n\n\n\n## Mappings\n\n::: {#5867f8d8 .cell execution_count=2}\n``` {.julia .cell-code}\ns = Sin(0 .. 3π)\nc = Cos(0 .. 3π)\n\nf = 2s\ng = s + f'\np = 1 / 20 * Polynomial([2, -1], 1 .. 8) * Polynomial([3, -1]) * Polynomial([4.5, -1]) * Polynomial([8, -1])\n\nplot(c, s, g, p)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](mathematics_files/figure-html/cell-3-output-1.svg){}\n:::\n:::\n\n\n::: {#ddb34aac .cell execution_count=3}\n``` {.julia .cell-code}\nf = Polynomial([0, 1], -1 .. 1)\nF = antiderivative(f)\nplot(f, F)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](mathematics_files/figure-html/cell-4-output-1.svg){}\n:::\n:::\n\n\n::: {#4096a51c .cell execution_count=4}\n``` {.julia .cell-code}\nintegrate(f, 0 .. 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0.5\n```\n:::\n:::\n\n\n::: {#21e462ad .cell execution_count=5}\n``` {.julia .cell-code}\np = [0, 1, 2]\nf = plot(fromroots(p, -0.1 .. 2.1))\ncm.scatter!(p, 0 * p, color=:tomato)\nf\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](mathematics_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\n::: {#e98f5da7 .cell execution_count=6}\n``` {.julia .cell-code}\np = [0, 1.5, 2]\nf = plot(lagrangepolynomials(p, 0 .. 2)...)\ncm.scatter!(p, [0, 0, 0], color=:tomato)\ncm.scatter!(p, [1, 1, 1], color=:blue)\nf\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](mathematics_files/figure-html/cell-7-output-1.svg){}\n:::\n:::\n\n\n### Monomials\n\n::: {#055b1de1 .cell execution_count=7}\n``` {.julia .cell-code}\nplot(monomials(0:100, 0 .. 1)...)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](mathematics_files/figure-html/cell-8-output-1.svg){}\n:::\n:::\n\n\n### Hermite like polynomials with middle node\n\nDefine linear forms\n\n::: {#b8d9b664 .cell execution_count=8}\n``` {.julia .cell-code}\nstruct ValueAt <: AbstractMapping{AbstractMapping,Real,AllOf{AbstractMapping}()}\n    x::Real\nend\nMMJMesh.Mathematics.valueat(u::ValueAt, f) = f(u.x)\n\nstruct DerivativeAt <: AbstractMapping{AbstractMapping,Real,AllOf{AbstractMapping}()}\n    x::Real\nend\nMMJMesh.Mathematics.valueat(u::DerivativeAt, f) = f'(u.x)\n```\n:::\n\n\nCompute polynomials\n\n::: {#8640a97a .cell execution_count=9}\n``` {.julia .cell-code}\nh = 2.0\nN = [ValueAt.(0:h/2:h); DerivativeAt.([0, h])] |> vcat\nP = monomials(0:length(N)-1, 0 .. h)\nM = [n(p) for p in P, n in N]\nH = inv(M) * P\nplot(H...)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](mathematics_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "mathematics_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}