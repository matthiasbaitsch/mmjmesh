---
title: "Demo for dimension parameter"
---

```{julia}
using Pkg
using Revise
Pkg.activate(".")
using MMJMesh.Meshes
```

# Version with Dimension type

```{julia}
abstract type Dimension end
abstract type D3 <: Dimension end
abstract type D2 <: D3 end
abstract type D1 <: D2 end
abstract type D0 <: D1 end

struct ME1{D <: Dimension} end

test(m::ME1{D0}) = println("Dimension 0")
test(m::ME1{D}) where D1<:D<:D2 = println("Dimension 1 or 2")
test(m::ME1{D3}) = println("Dimension 3")

test(ME1{D0}())
test(ME1{D1}())
test(ME1{D2}())
test(ME1{D3}())
```

# Version with Integers

```{julia}
struct ME2{D} 
    ME2{D}() where {D} = D isa Int && 0 <= D <= 3 ? new{D}() : error("Dimension must be an integer between 0 and 3")
end

test(m::ME2{0}) = println("Dimension 0")
test(m::ME2{D}) where D = println("Dimension $D (1 or 2)")
test(m::ME2{3}) = println("Dimension 3")

test(ME2{0}())
test(ME2{1}())
test(ME2{2}())
test(ME2{3}())
# test(ME2{4}())
```
