# Mathematics

```{julia}
#| echo: false
#| warning: false
include("setup.jl")
using IntervalSets
using LinearAlgebra
import CairoMakie as cm
```


## Mappings

```{julia}
f = Sin() ∘ (1 / Polynomial(0, 1, d=0.0 .. 0.05))
fplot(f, yscale=0.05, npoints=11)
```

```{julia}
s = Sin(0 .. 3π)
c = Cos(0 .. 3π)

f = 2s
g = s + f'
p = 1 / 20 * Polynomial([2, -1], 1 .. 8) * Polynomial([3, -1]) * Polynomial([4.5, -1]) * Polynomial([8, -1])

fplot(c, s, g, p)
```

```{julia}
f = Polynomial([0, 1], -1 .. 1)
F = antiderivative(f)
fplot(f, F)
```

```{julia}
integrate(f, 0 .. 1)
```

```{julia}
p = [0, 1, 2]
f = fplot(fromroots(p, -0.1 .. 2.1))
cm.scatter!(p, 0 * p, color=:tomato)
f
```

```{julia}
p = [0, 1.5, 2]
f = fplot(lagrangepolynomials(p, 0 .. 2)...)
cm.scatter!(p, [0, 0, 0], color=:tomato)
cm.scatter!(p, [1, 1, 1], color=:blue)
f
```

### Parametric curves

Lissajous curve

```{julia}
fplot(ParametricCurve(Cos(0 .. 2π), Sin() ∘ Polynomial(0, 2, d=0 .. 2pi)))
```

```{julia}
u = ParametricCurve(Cos(0 .. 2π), Sin() ∘ Polynomial(0, 2, d=0 .. 2pi))
s = Sin() ∘ Polynomial(0, 100)
n = UnitNormal(u)
fplot(u + 0.025 * s * n)
```


### Monomials

```{julia}
fplot(monomials(0:100, 0 .. 1)...)
```


### Hermite like polynomials with middle node

Define linear forms

```{julia}
import MMJMesh.Mathematics.valueat

struct ValueAtLF <: AbstractMapping{FunctionRToR,Real,Any}
    x::Real
end
valueat(u::ValueAtLF, f::FunctionRToR) = f(u.x)

struct DerivativeAtLF <: AbstractMapping{FunctionRToR,Real,Any}
    x::Real
end
valueat(u::DerivativeAtLF, f::FunctionRToR) = f'(u.x)
```

Compute polynomials

```{julia}
h = 2.0
N = [ValueAtLF.(0:h/2:h); DerivativeAtLF.([0, h])] |> vcat
P = monomials(0:length(N)-1, 0 .. h)
M = [n(p) for p in P, n in N]
H = inv(M) * P
fplot(H...)
```
