# The Mesh interface

This chapter is incomplete and probably not worth reading.

```{julia}
#| echo: false
#| warning: false
include("setup.jl")
```

## Basic usage

Create mesh

```{julia}
coords = [0.0 1.0 2.0 0.1 0.9 1.9; 0.0 0.1 0.0 0.9 1.0 0.9]
elts = [[1, 2, 5, 4], [2, 3, 6], [2, 6, 5]]
m = Mesh(coords, elts, 2)
mplot(m) |> mconf()
```

Coordinates of a node

```{julia}
coordinates(node(m, 2))
```

Coordinates of a face

```{julia}  
coordinates(face(m, 3))
```

Process faces and print node and edge indexes

```{julia}
for e âˆˆ elements(m)
    println(e)
    println("- ", nodeIdxs(e))
    println("- ", edgeIdxs(e))
    println("- ", faceIdxs(e))
end
```

## Read mesh from Gmsh file

```{julia}
m = Mesh(meshpath("complex-g1.msh"))
mplot(m, edgesvisible=true) |> mconf()
```

## Groups and predefined groups

Mesh entities can be collected in groups some of which are predefined.

```{julia}
keys(m.groups.recipes)
```

```{julia}
show(m.groups[:boundarynodes])
```

Groups can be used to filter access

```{julia}
m = Mesh(meshpath("complex-g1.msh"))
g = m.groups[:boundarynodes]
coords = coordinates(m)
p = mplot(m)
cm.scatter!(p.axis, coords[:, g], color = :hotpink)
p |> mconf()
```

Additional groups can be defined

```{julia}
using MMJMesh.Groups
m.groups[:f1] = FaceGroup(100:300)
m.groups[:f2] = FaceGroup(200:600)
m.groups[:e1] = EdgeGroup(600:800)
m.groups[:e2] = EdgeGroup(700:900)
mplot(m) |> mconf()
```


