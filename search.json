[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The MMJMesh Library",
    "section": "",
    "text": "1 Introduction\nThe MMJMesh library is intended to become a simple yet versatile basis for the implementation of finite element methods or postprocessing tools. At the moment it is in a very early stage of development."
  },
  {
    "objectID": "index.html#demo-for-1d-meshes",
    "href": "index.html#demo-for-1d-meshes",
    "title": "The MMJMesh Library",
    "section": "1.1 Demo for 1D meshes",
    "text": "1.1 Demo for 1D meshes\nFirst, we need to load the required modules. Note that CairoMakie included by import and not by using in order to avoid name collissions.\n\nimport CairoMakie\nusing MMJMesh.Plots\nusing MMJMesh.Meshes\nusing MMJMesh.Utilities\n\nIn the simplest case, a 1D mesh is defined by parameter bounds and the number of elements.\n\nm = makemeshoninterval(0.0, 8.0, 4)\nplot(m)\n\n\n\n\nElements of the mesh can be easily processed in a loop:\n\nfor e ∈ elements(m)\n    println(e, \" with n = \", nodeIdxs(e), \" and l = \", length(e))\nend\n\nEdge[1] with n = [1, 2] and l = 2.0\nEdge[2] with n = [2, 3] and l = 2.0\nEdge[3] with n = [3, 4] and l = 2.0\nEdge[4] with n = [4, 5] and l = 2.0\n\n\nVarious functions like nodeIdxs and length exist to access properties. If you are used to an object-oriented language like Java it might be helpful to understand that nodeIdxs(e) in Julia is equivalent to e.nodeIdxs() in an OO language.\nNode coordinates are retrieved using the coordinates method:\n\ncoordinates(m)\n\n2×5 Matrix{Float64}:\n 0.0  2.0  4.0  6.0  8.0\n 0.0  0.0  0.0  0.0  0.0\n\n\nProperties are associated with the mesh using the data field of the mesh and a name for the property in the form :name\n\n\nsqrt (generic function with 42 methods)\n\n\nand then are ready to be used in a later stage\n\nf = m.data[:bar]\nf(4)\n\n2.0\n\n\nIn Julia, :name is called a symbol. In many applications, this is equivalent to the use of strings like \"name\", however, easier to type.\nIt is easy to plot quantities for nodes\n\nplot(m, -1 .+ 2 * rand(nnodes(m)))\n\n\n\n\nconstant on elements\n\nplot(m, -1 .+ 2 * rand(nelements(m)))\n\n\n\n\nor linear on elements\n\nplot(m, -1 .+ 2 * rand(2, nelements(m)))\n\n\n\n\nFurthermore, 1D meshes can be created with a parametric function\n\nm = makemeshoninterval(0, 4, 60, t -&gt; [t; sin(π * t)])\nplot(m)\n\n\n\n\nwhere the last parameter t -&gt; [t; sin(t)] (read: t is mapped on the vector (t, sin(t))) defines the parametric curve\n\\[\n    \\mathbf{u}(t) =\n    \\left(\n    \\begin{array}{c}\n        t\n        \\\\\n        \\sin(t)\n    \\end{array}\n    \\right).\n\\]"
  },
  {
    "objectID": "mesh.html",
    "href": "mesh.html",
    "title": "2  The Mesh interface",
    "section": "",
    "text": "This chapter is incomplete and probably not worth reading.\nCreate mesh\n\ncoords = [0.0 1.0 2.0 0.1 0.9 1.9; 0.0 0.1 0.0 0.9 1.0 0.9]\nelts = [[1, 2, 5, 4], [2, 3, 6], [2, 6, 5]]\nm = Mesh(coords, elts, 2)\n\nplot(m)\n\n\n\n\nCoordinates of a node\n\ncoordinates(node(m, 2))\n\n2-element Vector{Float64}:\n 1.0\n 0.1\n\n\nCoordinates of a face\n\ncoordinates(face(m, 3))\n\n2×3 Matrix{Float64}:\n 1.0  1.9  0.9\n 0.1  0.9  1.0\n\n\nProcess faces and print node and edge indexes\n\nfor e ∈ elements(m)\n    println(e)\n    println(\"- \", nodeIdxs(e))\n    println(\"- \", edgeIdxs(e))\n    println(\"- \", faceIdxs(e))\nend\n\nFace[1]\n- \n\n\n[1, 2, 5, 4]\n- [1, 2, 3, 4]\n- [3]\nFace[2]\n- [2, 3, 6]\n- [5, 6, 7]\n- [3]\nFace[3]\n- [2, 6, 5]\n- [7, 8, 2]\n- [1, 2]"
  },
  {
    "objectID": "plot.html#plot-a-1d-mesh",
    "href": "plot.html#plot-a-1d-mesh",
    "title": "3  Plotting",
    "section": "3.1 Plot a 1D mesh",
    "text": "3.1 Plot a 1D mesh\n\n3.1.1 On a straight line\n\nm = makemeshoninterval(0, 4, 20)\nplot(m)\n\n\n\n\nOne value per node\n\nplot(m, -1.1 .+ 2.2 * rand(nentities(m.topology, 0)))\n\n\n\n\nOne value per element\n\nplot(m, -1.1 .+ 2.2 * rand(nedges(m)))\n\n\n\n\nTwo values per element\n\nplot(m, -1.1 .+ 2.2 * rand(2, nedges(m)))\n\n\n\n\n\n\n3.1.2 Vertical\n\nm = makemeshoninterval(π, 3π, 20, t -&gt; [0; t])\nplot(m, -1.1 .+ 3.2 * rand(nedges(m)))\n\n\n\n\n\n\n3.1.3 On a spiral\n\nm = makemeshoninterval(π, 3π, 20, t -&gt; t * [cos(t); sin(t)])\nplot(m, -1.1 .+ 3.2 * rand(2, nedges(m)))\n\n\n\n\n\n\n3.1.4 Customize plot\nPlot customization works like this:\n\nf = plot(m, -1.1 .+ 3.2 * rand(2, nedges(m)))\nax = f.content[1]\nax.title = \"Spiral with reversed vertical axis\"\nax.yreversed = true\nf\n\n\n\n\nDocumentation on plot axis can be found on the Makie documentation which unfortunately is quite hard to read."
  },
  {
    "objectID": "plot.html#plot-a-2d-mesh",
    "href": "plot.html#plot-a-2d-mesh",
    "title": "3  Plotting",
    "section": "3.2 Plot a 2D mesh",
    "text": "3.2 Plot a 2D mesh\n\n3.2.1 Quad mesh\n\na = 80\nm = makemeshonrectangle(9.0, 4.5, 2a, a)\nprintln(\"Number of nodes is Nn = \", (a + 1) * (2a + 1))\nprint(\"Links...\")\n@time l12 = links(m.topology, 1, 2);\n\nNumber of nodes is Nn = 13041\nLinks...\n\n\n  0.149770 seconds (1.17 M allocations: 90.228 MiB, 21.21% gc time, 47.86% compilation time)\n\n\nDefault color\n\nps = PlotStyle(m)\nps.edges.outlineonly = false\nps.edges.color = :hotpink\nplot(m, ps)\n\n\n\n\nColors for nodes\n\nplot(m, 4.1 * (rand(nentities(m.topology, 0)) .- 0.25))\n\n\n\n\nColors for elements\n\nplot(m, 4.1 * (rand(nentities(m.topology, 2)) .- 0.25))\n\n\n\n\n\n\n3.2.2 Triangle mesh\n\na = 20\nm = makemeshonrectangle(9.0, 4.5, 2a, a, TRIANGLE)\nprintln(\"Nn = \", (a + 1) * (2a + 1))\nprint(\"Links (1, 2):\")\n@time l12 = links(m.topology, 1, 2);\n\nNn = 861\nLinks (1, 2):  0.004142 seconds (101.71 k allocations: 8.227 MiB)\n\n\nDefault color\n\nps = PlotStyle(m)\nps.edges.outlineonly = false\nps.edges.color = :hotpink\nplot(m, ps)\n\n\n\n\nColors for nodes\n\nplot(m, 4.1 * (rand(nentities(m.topology, 0)) .- 0.25))\n\n\n\n\nColors for elements\n\nplot(m, 4.1 * (rand(nentities(m.topology, 2)) .- 0.25))"
  }
]