[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The MMJMesh Library",
    "section": "",
    "text": "1 Introduction\nThe MMJMesh library is intended to become a simple yet versatile basis for the implementation of finite element methods or postprocessing tools. At the moment it is in a very early stage of development."
  },
  {
    "objectID": "index.html#demo-for-1d-meshes",
    "href": "index.html#demo-for-1d-meshes",
    "title": "The MMJMesh Library",
    "section": "1.1 Demo for 1D meshes",
    "text": "1.1 Demo for 1D meshes\nFirst, we need to load the required modules. Note that CairoMakie included by import and not by using in order to avoid name collissions.\nimport CairoMakie\nusing MMJMesh.Plots\nusing MMJMesh.Meshes\nusing MMJMesh.Utilities\n#| echo: false\nCairoMakie.set_theme!(CairoMakie.theme_minimal())\nIn the simplest case, a 1D mesh is defined by parameter bounds and the number of elements.\nm = makemeshoninterval(0.0, 8.0, 4)\nplot(m)\nElements of the mesh can be easily processed in a loop:\nfor e âˆˆ elements(m)\n    println(e, \" with n = \", nodeIdxs(e), \" and l = \", length(e))\nend\nVarious functions like nodeIdxs and length exist to access properties. If you are used to an object-oriented language like Java it might be helpful to understand that nodeIdxs(e) in Julia is equivalent to e.nodeIdxs() in an OO language.\nNode coordinates are retrieved using the coordinates method:\ncoordinates(m)\nProperties are associated with the mesh using the data field of the mesh and a name for the property in the form :name\nm.data[:foo] = 99\nm.data[:bar] = sqrt\nand then are ready to be used in a later stage\nf = m.data[:bar]\nf(4)\nIn Julia, :name is called a symbol. In many applications, this is equivalent to the use of strings like \"name\", however, easier to type.\nIt is easy to plot quantities for nodes\nplot(m, -1 .+ 2 * rand(nnodes(m)))\nconstant on elements\nplot(m, -1 .+ 2 * rand(nelements(m)))\nor linear on elements\nplot(m, -1 .+ 2 * rand(2, nelements(m)))\nFurthermore, 1D meshes can be created with a parametric function\nm = makemeshoninterval(0, 4pi, 60, t -&gt; [t; sin(t)])\nplot(m)\nwhere the last parameter t -&gt; [t; sin(t)] (read: t is mapped on the vector (t, sin(t))) defines the parametric curve\n\\[\n    \\mathbf{u}(t) =\n    \\left(\n    \\begin{array}{c}\n        t\n        \\\\\n        \\sin(t)\n    \\end{array}\n    \\right).\n\\]"
  }
]