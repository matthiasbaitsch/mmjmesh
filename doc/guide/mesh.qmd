---
engine: julia
---

# The Mesh interface

This chapter is utterly incomplete

```{julia}
#| echo: false
#| warning: false
include("setup.jl")
```

## Basic usage

Create mesh with coordinates and connectivity

```{julia}
coords = [0.0 1.0 2.0 0.1 0.9 1.9; 0.0 0.1 0.0 0.9 1.0 0.9]
elts = [[1, 2, 5, 4], [2, 3, 6], [2, 6, 5]]
m = Mesh(coords, elts, 2)
mplot(m) |> mconf()
```

Coordinates of a node

```{julia}
coordinates(node(m, 2))
```

Coordinates of a face

```{julia}
coordinates(face(m, 3))
```

Process faces and print node and edge indices

```{julia}
for e ∈ elements(m)
    println(e)
    println("- ", nodeindices(e))
    println("- ", edgeindices(e))
    println("- ", faceindices(e))
end
```

## Build mesh incrementally

```{julia}
l = 80
h1 = 2
h2 = 12
nn = 21
ne = nn - 1
ne2 = ne ÷ 2

m = Mesh(1, 2)
is1 = addnodes!(m, [-l / 2, 0], [l / 2, 0], nn)
is2 = addnodes!(m, polynomialinterpolation([-l / 2, h1], [0, h2], [l / 2, h1]), nn)
addelements!(m, is1, is1 .+ 1, n=ne, group=:chord)
addelements!(m, is2, is2 .+ 1, n=ne, group=:chord)
addelements!(m, is1, is2, group=:vert)
addelements!(m, is2, is1 .+ 1, n=ne2, group=:diag)
addelements!(m, is1 .+ ne2, is2 .+ (ne2 + 1), n=ne2, group=:diag)
mplot(m, edgecolor=:groups, nodesvisible=true) |> mconf()
```

## Read mesh from Gmsh file

```{julia}
m = Mesh(meshpath("complex-g1.msh"))
mplot(m, edgesvisible=true) |> mconf()
```

## Working with meshes

A mesh consists of mesh parts:

| Type    | Parametric dimension      |
|---------|---------------------------|
| Node    | 0                         |
| Edge    | 1                         |
| Face    | 2                         |
| Solid   | 3                         |
| Element | Maximum dimension in mesh | 

The element type simply refers to the parts of the highest dimension present in the mesh. It is introduced in order to be compatible with common finite element terminology.

For the nodes of mesh or mesh part `m`, the functions

- `nnodes(m)`: Number of nodes

- `node(m, n)`: Node `n`

- `nodes(m)`: All nodes

- `nodeindices(m)`: Indices of nodes

- `coordinates(m, n)`: Coordinates of node `n`

- `coordinates(m)`: All node coordinates in a matrix

exist. There are similar functions for edges, faces and solids and elements. In addition, the functions `length(edge)` and `area(face)` exist.

```{julia}
m = Mesh(meshpath("complex-g1.msh"))

println("Number of nodes: ", nnodes(m))
println("           Edge: ", edge(m, 21))
println("           Face: ", face(m, 67))
println("   Node indices: ", nodeindices(element(m, 67)))
println("    Coordinates: ", coordinates(element(m, 67)))
println("     Total area: ", sum(area.(faces(m))))
```

## Groups and predefined groups

Mesh entities can be collected in groups some of which are predefined.

```{julia}
groupnames(m)
groupnames(m, predefined=true)
```

```{julia}
show(group(m, :boundarynodes))
```

Groups can be used to filter access

```{julia}
m = Mesh(meshpath("complex-g1.msh"))
p = mplot(m)
scatter!(coordinates(m, :boundarynodes), color=:hotpink)
p |> mconf()
```

Additional groups can be defined

```{julia}
definegroup!(m, 2, :f1, 100:300)
definegroup!(m, 2, :f2, 200:600)
definegroup!(m, 1, :e1, 600:800)
definegroup!(m, 1, :e2, 700:900)
mplot(m) |> mconf()
```

## Data

Example how to attach data to mesh entities:

```{julia}
m = Mesh(meshpath("complex-g1.msh"))

n1 = node(m, 1)
n2 = node(m, 2)
e22 = element(m, 22)

setdata!(n1, :d1, 42)
setdata!(e22, :d2, 61)

println("data( n1, :d1) = ", data(n1, :d1))
println("data( n2, :d1) = ", data(n2, :d1))
println("data(e22, :d2) = ", data(e22, :d2))
```

Use `hasdata` to test, if data is defined:

```{julia}
println("hasdata( n1, :d1) = ", hasdata(n1, :d1))
println("hasdata( n2, :d1) = ", hasdata(n2, :d1))
```

Example how to attach data to groups:

```{julia}
m = Mesh(meshpath("complex-g1.msh"))

g1 = group(m, :s1)
g2 = group(m, :s2)
g3 = group(m, :s3)

println("s1: ", g1)
println("s2: ", g2)
println("s3: ", g3)

setdata!(g1, :foo, "f1")
setdata!(g2, :foo, "f2")
setdata!(g3, :foo, "f3")

e2 = element(m, 5)
e490 = element(m, 490)
e1132 = element(m, 1132)

println("data(e2, :foo) = ", data(e2, :foo))
println("data(e490, :foo) = ", data(e490, :foo))
println("data(e1132, :foo) = ", data(e1132, :foo))
```

Example how to attach data to elements:

```{julia}
m = Mesh(0 .. 10, 20)
setdata!(group(m, :elements), :foo, 99)
println(data(element(m, 2), :foo))
```