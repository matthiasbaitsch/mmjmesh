---
engine: julia
---

# The Mesh interface

This chapter is utterly incomplete

```{julia}
#| echo: false
#| warning: false
include("setup.jl")
```

## Basic usage

Create mesh with coordinates and connectivity

```{julia}
coords = [0.0 1.0 2.0 0.1 0.9 1.9; 0.0 0.1 0.0 0.9 1.0 0.9]
elts = [[1, 2, 5, 4], [2, 3, 6], [2, 6, 5]]
m = Mesh(coords, elts, 2)
mplot(m) |> mconf()
```

Coordinates of a node

```{julia}
coordinates(node(m, 2))
```

Coordinates of a face

```{julia}  
coordinates(face(m, 3))
```

Process faces and print node and edge indices

```{julia}
for e ∈ elements(m)
    println(e)
    println("- ", nodeindices(e))
    println("- ", edgeindices(e))
    println("- ", faceindices(e))
end
```

## Build mesh incrementally

```{julia}
l = 80
h1 = 2
h2 = 12
nn = 21
ne = nn - 1
ne2 = ne ÷ 2

m = Mesh(1, 2)
is1 = addnodes!(m, [-l / 2, 0], [l / 2, 0], nn)
is2 = addnodes!(m, polynomialinterpolation([-l / 2, h1], [0, h2], [l / 2, h1]), nn)
addelements!(m, is1, is1 .+ 1, n=ne, group=:chord)
addelements!(m, is2, is2 .+ 1, n=ne, group=:chord)
addelements!(m, is1, is2, group=:vert)
addelements!(m, is2, is1 .+ 1, n=ne2, group=:diag)
addelements!(m, is1 .+ ne2, is2 .+ (ne2 + 1), n=ne2, group=:diag)
mplot(m, edgecolor=:groups, nodesvisible=true) |> mconf()
```

## Read mesh from Gmsh file

```{julia}
m = Mesh(meshpath("complex-g1.msh"))
mplot(m, edgesvisible=true) |> mconf()
```

## Groups and predefined groups

Mesh entities can be collected in groups some of which are predefined.

```{julia}
keys(m.groups.recipes)
```

```{julia}
show(m.groups[:boundarynodes])
```

Groups can be used to filter access

```{julia}
m = Mesh(meshpath("complex-g1.msh"))
p = mplot(m)
scatter!(p.axis, coordinates(m, :boundarynodes), color=:hotpink)
p |> mconf()
```

Additional groups can be defined

```{julia}
m.groups[:f1] = FaceGroup(100:300)
m.groups[:f2] = FaceGroup(200:600)
m.groups[:e1] = EdgeGroup(600:800)
m.groups[:e2] = EdgeGroup(700:900)
mplot(m) |> mconf()
```

## Data

Example how to attach data to mesh entities:

```{julia}
m = Mesh(meshpath("complex-g1.msh"))

n1 = node(m, 1)
n2 = node(m, 2)
e22 = element(m, 22)
n1.data[:d1] = 42
e22.data[:d2] = 61

println(" n1.data[:d1] = ", n1.data[:d1])
println(" n2.data[:d1] = ", n2.data[:d1])
println("e22.data[:d2] = ", e22.data[:d2])
```

Example how to attach data to groups:

```{julia}
m = Mesh(meshpath("complex-g1.msh"))

println("s1: ", m.groups[:s1].indices)
println("s2: ", m.groups[:s2].indices)
println("s3: ", m.groups[:s3].indices)

m.data[:kefunc, :s1] = "f1";
m.data[:kefunc, :s2] = "f2";
m.data[:kefunc, :s3] = "f3";

e0005 = element(m, 0005)
e0490 = element(m, 0490)
e1132 = element(m, 1132)

println("e0005.data[:kefunc] = ", e0005.data[:kefunc])
println("e0490.data[:kefunc] = ", e0490.data[:kefunc])
println("e1132.data[:kefunc] = ", e1132.data[:kefunc])
```

Example how to attach data to elements:

```{julia}
m = Mesh(0 .. 10, 20)
m.data[:test, :elements] = 99

e1 = element(m, 1)
println(e1.data[:test])
```
