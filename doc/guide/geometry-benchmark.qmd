---
title: "Development sandbox"
execut:
    echo: false
---

```{julia}
using Pkg
Pkg.activate(".")

using Revise
using BenchmarkTools
using MMJMesh.Geometries

# Number of points
n = 10_000_000
```

# What is a fast way to store points

## Version with vector of points (as in Meshes.jl)

```{julia}
# Mimic the way Meshes.jl stores points
struct Geometry2{D}
    points::Vector{Point{D}}
end
point2(g::Geometry2, idx::Int) = g.points[idx]
addpoint2!(g::Geometry2, p::Point) = push!(g.points, p)

g = Geometry2{3}(Point{3}[])

println("\nMeshes.jl version")

println("Adding $n points")
@time for _ in 1:n
    addpoint2!(g, Point(rand(), rand(), rand()))
end

println("Retrieving $n points")
@time for _ in 1:n
    a = point2(g, rand(1:n))
end
```

## Our version

```{julia}
g = Geometry(3);

println("\nOur version")

println("Adding $n points")
@time for i in 1:n
    push!(g, [rand(); rand(); rand()])
end

println("Retrieving $n points")
@time for _ in 1:n
    a = g[0, rand(1:n)]
end
```

Constructing the point is not that expensive
