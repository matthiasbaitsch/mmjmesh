# Finite elements

```{julia}
#| echo: false
#| warning: false
include("setup.jl")
using Latexify
using WGLMakie
using Symbolics
using CairoMakie
using IntervalSets
using LinearAlgebra
CairoMakie.activate!()
```

## Elements

```{julia}
fig = Figure(size=(800, 800))
Axis(fig)
feplot(fig[1, 1], makeelement(:lagrange, IHat, k=1)) |> feconf()
feplot(fig[1, 2], makeelement(:lagrange, IHat, k=3)) |> feconf()
feplot(fig[2, 1], makeelement(:hermite, IHat)) |> feconf()
feplot(fig[2, 2], makeelement(:lagrange, QHat, k=1)) |> feconf()
feplot(fig[3, 1], makeelement(:lagrange, QHat, k=2)) |> feconf()
feplot(fig[3, 2], makeelement(:serendipity, QHat, k=2)) |> feconf()
feplot(fig[4, 1], makeelement(:hermite, QHat, conforming=true)) |> feconf()
feplot(fig[4, 2], makeelement(:hermite, QHat, conforming=false)) |> feconf()
fig
```

## Shape functions

Linear shape functions

```{julia}
e = makeelement(:lagrange, IHat, k=1)
ϕ = nodalbasis(e)
fplot(ϕ...)
```

Hermite polynomials

```{julia}
e = makeelement(:hermite, 1 .. 4)
ϕ = nodalbasis(e)
fplot(ϕ...)
```

Bilinear shape functions

```{julia}
#| echo: false
GLMakie.activate!()
```

```{julia}
makeelement(:lagrange, QHat, k=1) |> nodalbasis |> fplot3d
```

Serendipity shape functions

```{julia}
makeelement(:serendipity, (0 .. 2) × (0 .. 1), k=2) |> nodalbasis |> fplot3d
```

Conforming rectangular plate element shape functions

```{julia}
makeelement(:hermite, QHat) |> nodalbasis |> fplot3d
```

## Finite element stiffness matrices

```{julia}
@variables l, a, b, EA, EI, ν;
```

### Truss

```{julia}
L11 = nodalbasis(makeelement(:lagrange, IHat, k=1))
D(u) = 2 / l * u'
ae(u, δu) = EA * l / 2 * integrate(D(u) * D(δu), IHat)
Ke = simplify.([ae(s1, s2) for s1 ∈ L11, s2 ∈ L11])
```

### Beam

```{julia}
H1 = nodalbasis(makeelement(:hermite, IHat))
H1l = [H1[1], l / 2 * H1[2], H1[3], l / 2 * H1[4]]
D(w) = 4 / l^2 * w''
ae(w, δw) = EI * l / 2 * integrate(D(w) * D(δw), IHat)
Ke = simplify.(l^3 / EI * [ae(s1, s2) for s1 ∈ H1l, s2 ∈ H1l])
```

### 2D Poisson equation

Integration on the reference quadrilateral

```{julia}
L21 = nodalbasis(makeelement(:lagrange, QHat, k=1))
D(u) = [2 / a * ∂x(u), 2 / b * ∂y(u)]
ae(u, v) = a * b / 4 * integrate(D(u) ⋅ D(v), QHat)
Ke = simplify.(6 * a * b * [ae(n1, n2) for n1 ∈ L21, n2 ∈ L21], expand=true)
```

Alternative derivation in physical coordinates

```{julia}
V = [0 a a 0; 0 0 b b]
N = [ValueAtLF(p) for p in eachcol(V)]
PP = mmonomials(2, 1, QHat)
M = [n(p) for p in PP, n in N]
L21p = inv(M) * PP

ae(u, v) = integrate(∇(u) ⋅ ∇(v), (0 .. a) × (0 .. b))
Ke = simplify.(expand.(6 * a * b * [ae(n1, n2) for n1 ∈ L21p, n2 ∈ L21p]))
```

Nicely formatted output. TODO: Handle LaTeX-String from `latexify`

$$
    \mathbf{K}^\mathrm{e} = \frac{1}{6ab} \cdot `{julia} latexify(Ke, env=:raw)`
$$
